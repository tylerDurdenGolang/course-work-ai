import os
import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram import Update
from telegram.ext.callbackcontext import CallbackContext

import numpy as np
from PIL import Image

from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MODEL_PATH = os.path.join(os.path.dirname(__file__), "my_mnist_params.npz")
if not os.path.isfile(MODEL_PATH):
    raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏: {MODEL_PATH}\n"
                            f"–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python train.py")

data = np.load(MODEL_PATH)
params = {
    "W1": data["W1"],
    "b1": data["b1"],
    "W2": data["W2"],
    "b2": data["b2"]
}

def forward(X, params):
    """
    –ü—Ä—è–º–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è MLP:
    ReLU -> Softmax
    """
    W1, b1, W2, b2 = params['W1'], params['b1'], params['W2'], params['b2']
    # –°–ª–æ–π 1 (ReLU)
    z1 = X @ W1 + b1
    a1 = np.maximum(0, z1)
    # –í—ã—Ö–æ–¥ (softmax)
    z2 = a1 @ W2 + b2
    expZ = np.exp(z2 - np.max(z2, axis=1, keepdims=True))
    return expZ / np.sum(expZ, axis=1, keepdims=True)

def start_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, —Ä–∞—Å–ø–æ–∑–Ω–∞—é—â–∏–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (0..9).\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ü–∏—Ñ—Ä—ã."
    )

def help_command(update: Update, context: CallbackContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help """
    update.message.reply_text(
        "üìå **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.\n\n"
        "üì∑ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–∏—Ñ—Ä–æ–π.\n"
        "2. –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ—ë –∏ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "3. –ï—Å–ª–∏ —Ü–∏—Ñ—Ä–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )

def handle_image(update: Update, context: CallbackContext):
    photo_file = update.message.photo[-1].get_file()
    file_path = "temp_digit.jpg"
    photo_file.download(file_path)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º, –ø—Ä–∏–≤–æ–¥–∏–º –∫ 28x28, grayscale
    img = Image.open(file_path).convert('L').resize((28, 28))
    arr = np.array(img, dtype=np.float32)

    # 1) –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    arr = 255 - arr

    # 2) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—Ä–æ—Å—Ç–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
    #    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —É –≤–∞—Å —à—É–º–Ω—ã–π —Ñ–æ–Ω
    # arr[arr < 128] = 0
    # arr[arr >= 128] = 255

    arr = arr / 255.0
    arr = arr.reshape((1, -1))

    # pred = forward(arr, params)
    # digit = np.argmax(pred, axis=1)[0]

    # 4. –ü—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ —Å–µ—Ç—å
    pred = forward(arr, params)            # pred.shape -> (1, 10)
    pred = pred[0]                         # —Ç–µ–ø–µ—Ä—å (10, )
    digit = np.argmax(pred)                # –∏–Ω–¥–µ–∫—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é

    update.message.reply_text(f"–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ —Ü–∏—Ñ—Ä–∞: {digit}")
    os.remove(file_path)

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥–∞ /start
    dp.add_handler(CommandHandler("start", start_command))
    dp.add_handler(CommandHandler("help", help_command))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.photo, handle_image))

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    updater.start_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ù–∞–∂–º–∏—Ç–µ Ctrl+C, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
    updater.idle()

if __name__ == "__main__":
    main()
